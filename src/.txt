

remove serching and add authencation pages
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  deleterecipe,
  editrecipe,
  fetchrecipe,
} from "../features/recipe/thunk";

function Table() {
  const dispatch = useDispatch();
  const { recipe } = useSelector((state) => state.recipe);

  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState("asc");
  const [editingId, setEditingId] = useState(null);
  const [editData, setEditData] = useState({ rname: "", ingridents: "" });

  useEffect(() => {
    dispatch(fetchrecipe());
  }, [dispatch]);

  // Handle sorting
  const sortedRecipes = [...recipe].sort((a, b) => {
    const nameA = a.rname.toLowerCase();
    const nameB = b.rname.toLowerCase();
    if (sortOrder === "asc") return nameA.localeCompare(nameB);
    else return nameB.localeCompare(nameA);
  });

  // Handle search
  const filteredRecipes = sortedRecipes.filter((r) =>
    r.rname.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleEditClick = (r) => {
    setEditingId(r.id);
    setEditData({ rname: r.rname, ingridents: r.ingridents });
  };

  const handleSave = () => {
    dispatch(editrecipe({ id: editingId, ...editData }));
    setEditingId(null);
    setEditData({ rname: "", ingridents: "" });
  };

  return (
    <div className="container">
      <h3 className="mt-4">Recipe Table</h3>

      {/* Search & Sort */}
      <div className="d-flex justify-content-between mb-3">
        <input
          type="text"
          placeholder="Search by name..."
          className="form-control w-50 me-2"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        <button
          onClick={() =>
            setSortOrder((prev) => (prev === "asc" ? "desc" : "asc"))
          }
          className="btn btn-primary"
        >
          Sort: {sortOrder === "asc" ? "A-Z" : "Z-A"}
        </button>
      </div>

      {/* Table */}
      <table className="table table-bordered">
        <thead className="table-dark">
          <tr>
            <th>#</th>
            <th>Recipe Name</th>
            <th>Ingredients</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredRecipes.map((r, index) => (
            <tr key={r.id}>
              <td>{index + 1}</td>
              <td>
                {editingId === r.id ? (
                  <input
                    value={editData.rname}
                    onChange={(e) =>
                      setEditData({ ...editData, rname: e.target.value })
                    }
                    className="form-control"
                  />
                ) : (
                  r.rname
                )}
              </td>
              <td>
                {editingId === r.id ? (
                  <input
                    value={editData.ingridents}
                    onChange={(e) =>
                      setEditData({ ...editData, ingridents: e.target.value })
                    }
                    className="form-control"
                  />
                ) : (
                  r.ingridents
                )}
              </td>
              <td>
                {editingId === r.id ? (
                  <>
                    <button onClick={handleSave} className="btn btn-success btn-sm me-1">
                      Save
                    </button>
                    <button
                      onClick={() => setEditingId(null)}
                      className="btn btn-secondary btn-sm"
                    >
                      Cancel
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      onClick={() => dispatch(deleterecipe(r.id))}
                      className="btn btn-danger btn-sm me-1"
                    >
                      Delete
                    </button>
                    <button
                      onClick={() => handleEditClick(r)}
                      className="btn btn-warning btn-sm"
                    >
                      Edit
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
          {filteredRecipes.length === 0 && (
            <tr>
              <td colSpan="4" className="text-center text-muted">
                No matching recipes found.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}

export default Table;



import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// Base API URL
const BASE_URL = "http://localhost:3000/recipe";

/**
 * Fetch all recipes
 */
export const fetchrecipe = createAsyncThunk(
  "recipe/fetchRecipe",
  async () => {
    const response = await axios.get(BASE_URL);
    return response.data;
  }
);

/**
 * Create a new recipe
 */
export const createrecipe = createAsyncThunk(
  "recipe/createRecipe",
  async (recipe) => {
    const response = await axios.post(BASE_URL, recipe);
    return response.data;
  }
);

/**
 * Delete a recipe by ID
 */
export const deleterecipe = createAsyncThunk(
  "recipe/deleteRecipe",
  async (id) => {
    await axios.delete(`${BASE_URL}/${id}`);
    return id;
  }
);

/**
 * Edit a recipe by ID
 */
export const editrecipe = createAsyncThunk(
  "recipe/editRecipe",
  async (recipe) => {
    const response = await axios.put(`${BASE_URL}/${recipe.id}`, recipe);
    return response.data;
  }
);

